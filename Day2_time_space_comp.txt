basic idea of time Complexity

for(i = 0; i<n; i++) ----> O(n)
for(i = n; i>0; i--) ----> O(n)
for(i = 0; i<n; i = i+2) ---->n/2 =  O(n)
for(i = 0; i<n; i = i*2) ---->O(logn)
for(i = 0; i<n; i = i/2) ---->O(logn)


Increasing order
1 < logn < root/n < n < nlogn < n^2 < n^3 < .... < 2^n < 3^n


*********************************************************************************************************



1) 

int a = 0, b = 0;
for (i = 0; i < N; i++) {
    a = a + rand();
}
for (j = 0; j < M; j++) {
    b = b + rand();
}

time & space Complexity ----> O(N + M) time, O(1) space

2)

int a = 0;
for (i = 0; i < N; i++) {
    for (j = N; j > i; j--) {
        a = a + i + j;
    }
}

time Complexity ----> O(N*N)


3)
int i, j, k = 0;
for (i = n / 2; i <= n; i++) {
    for (j = 2; j <= n; j = j * 2) {
        k = k + n / 2;
    }
}

time Complexity ----> O(nlogn)

4) 

int a = 0, i = N;
while (i > 0) {
    a += i;
    i /= 2;
}

time Complexity ----> O(logn)

5)

for(var i=0;i<n;i++)
    i*=k

time Complexity ----> O(logkn)


6)

int value = 0;
for(int i=0;i<n;i++)
    for(int j=0;j<i;j++)
      value += 1;

time Complexity ----> n(n - 1)

7)
