    stl topics:
1) Alogrithms
2) Containers  --> DONE
3) Functions   --> X
4) Iterators   --> DONE


******************************* PAIRS ****************************
*) pair<int, int> p = {1, 7};
    // Access
p.first --> {1}
p.second --> {7}

*) Nested PAIRS
pair<int, pair<int, int>> p = {4, {56, 89}};
// Access
p.first --> {4}
p.second.first --> {56}
p.second.second --> {89}

*) Array PAIRS
pair<int, int> arr[] = {{1, 3}, {4, 7}, {7, 9}};
// Access
arr[0].first-- > {1} arr[2].second-- > {9}

************************************ VECTORS *******************************************


vector<int> v;  --> creates empty conatiner

// Insert the elements in vector
v.push_back(20); -- > {20} insert the element by 1 
v.emplace_back(30);-- > {30}

// vector pair
vector<pair<int, int>> vpr;


// Insert the push in vector
vpr.push_back({20, 56});    {20, 56} 
vpr.emplace_back(88, 45);   {88, 45} -- > automatically consider it as pair

// instances by size
         size, number
vector<int> v(5, 27) -- > {27, 27, 27, 27, 27}

vector<int> v(5);  --> delacre by garbage value


//copy the vector to another vector
vector<int> v1(v)  --> forms another conatiner not the copy



// Access
v --> {20, 10, 15, 5, 7}


*) like array 
cout<<v[0]<<endl;
cout << v.at[0] << endl;


// Iterators in Vector by v.begin --> it posint to the memory not the element
vector<int>::iterator it = v.begin();
it++;
cout << *(it) << endl;

it = it + 2;
cout << *(it) << endl;

*) vector<int>::iterator it = v.end();  --> {1, 2,3} ^ there not at end if u want to acces end val do it--
*) vector<int>::iterator it = v.rend(); --> reverse end  ^ {1, 2, 3}  there not at start if u want to acces start val do it++
*) vector<int>::iterator it = v.rbegin();  -- > {1, 2, 3 ^ } pts at end if u want to acces nxt val do it++

cout<< v.back() << endl;   {1, 2, 3 ^}


// Access the array
// Print the vetors using array
for (int i = 0; i < n; i++)
{
    cout << v[i] << " ";
}


// Print the vetors using Iterators
for (vector<int>::iterator it = v.begin(); it != v.end(); it++)
{
    cout << *(it) << " ";
}

// shortcut for Printing the vetors using Iterators
for(auto it = v.begib(); it != v.end(); it++){
    cout<<*(it)<<" "
}

// forEach loop
for(auto it : v){
    cout<<it<<" "
}


// delete VECTORS
v.erase(v.begin()+1);      {1,2 ,3} --> {1, 3}

//delete PAIRS
{start include, end is not included}
v.erase(v.begin()+1, v.begin()+3);  {1,2^ ,3,4^,5} --> {1,4, 5}



// Insert Functions
vector<int> v(2, 100) --> {100, 100}

v.insert(v.begin(), 300)   --> {300, 100, 100}
v.insert(v.begin()+1, 2, 10);   --> {300, 10, 10, 100, 100}


insert to another vector
vetor<int> copy(2, 50);  --> {2, 50}
v.inert(v.begin(), copy.begin(), copy.end())  --> {50, 50, 300, 10, 10, 100, 100}


//size of vector
cout<<v.sixe()<<endl; --> {20,4} = 2

// pop element out
v.pop_back()  --> {20} pops one element from end

//swap element
v1 = {1,2,3}
v2 = {6, 7}
v1.swap(v2)  -->  v1 =  {6, 7} //  v2 = {1, 2, 3} 

// erase entire vector
v.clear();


// check vector is empty or not
cout<<v.empty()<<endl;  --> empty or not






************************************ LIST *******************************************
same as Vectors but can insert elements from front and back
list<int> ls;

// Insert
ls.push_back(30);  --> {30}
ls.emplace_back(40);  {30, 40}


ls.push_front(11); --> {11, 30, 40}
ls.emplace_front(20);  --> {20, 11, 30, 40}



************************************ STACK *******************************************

// declare
stack<int> st;
//Insert
st.push(1);   --> {1}
st.push(3);   --> {3, 1}
st.emplace(4);  --> {4, 3, 1}

// fetch top stack element
cout<<st.top();

// fetch size stack
cout<<st.size();

// check for the empty stack
cout<<st.empty();

// swap stack elements
stack<int> st1, st2;
st1.swap(st2);



************************************ DEQUE *******************************************
deque<int> dq;

//Insert at back

dq.push_back(1);  --> {1}
dq.emplace_back(98);  -->{1, 98}

//Insert at front

dq.push_front(11);   --> {11, 1,98}
dq.emplace_front(36);  --> {36, 11, 1, 98}

//delete at front/back

dq.pop_back();  --> {36, 11, 1}
dq.pop_front();  --> {36, 11, 1};


dq.back();
dq.front();



************************************ QUEUE *******************************************
queue<int> a;

/Insert
q.push(1); -->{1}
q.push(10);  -->{1, 10}
q.push(78);  --> {1, 10 , 78}
q.emplace(55);   --> {1, 10 , 78, 55}

// Opeations
q.back() += 5;

cout<<"back: "<<q.back();   --> {60}

now queue is --> {1, 10 , 78, 60}


// Insert front
cout<<q.front;  --> 1

// Delete
q.pop();  --> {10, 78, 60}

cout<<q.front;  --> 10



************************************ PRIORITY QUEUE *******************************************
priority_queue<int> pq;


//Insert

pq.push(3);  --> {3} 
pq.push(39); --> {39, 3}
pq.push(23);  --> {23, 39, 3}
pq.push(883);  --> {883, 23, 39, 3}
pq.emplace(6);  --> {883, 23, 39, 6, 3}

// top
cout<<pq.top();  --> 883

//pop
pq.pop();  --> 883

// pq is: --> {23, 39, 6, 3}


    // Set Minimum number priority    --> min heap

    priority_queue<int, vector<int>, greater<int>> minpq;

    minpq.push(257);  --> {257}
    minpq.push(4);   --> {4, 257}
    minpq.push(890);  --> {4, 257, 890}
    minpq.push(7);   --> {4,7, 257, 890}
    minpq.emplace(1000);  --> {4,7, 257, 890, 1000}


    cout<<minpq.top();   --> 4



************************************ SET  *******************************************

set<int> st;    --> stores in sorted order and unique

st.insert(55);    --> {55}
st.insert(283);   --> {55, 283}
st.insert(6);     --> {6, 55, 283}
st.insert(6);     --> {6, 55, 283}
st.insert(89);    --> {6, 55,89, 283}
st.emplace(1);     --> {1, 6, 55,89, 283}


// begin(), end(), rbegin(), rend(), size()
//empty() and swap() are same as those above


// if elements present
auto it = st.find(89);   --> 3    (0- n-1) return index

// if elements  NOT present
auto it = st.find(100);   --> 3    (0- n-1) return index n


//Delete
st.erase(1);


auto it = it.find(100);
st.erase(it);


// Count

int cnt = st.count(6);  --> present return 1 or 0


st1 = {1,2 ,3,4, 5}
auto it1 = st1.find(2);
auto it2 = st1.find(4);
st1.erase(it1, it2)    --> {1, 4, 5}


auto it = st.lower_bound(2);  --> If the specified value is equal to an element in the set, it returns an iterator pointing to that element
auto it = st.upper_bound(3);  -->  If the specified value is equal to an element in the set, it returns an iterator pointing to the element just after that element.

or else return end() If the specified value is not equal to an element in the set



************************************ MULTISET  *******************************************

mutltiset<int> ms;    --> stores in sorted order and not unique 

//Insert
ms.insert(1);   --> {1}
ms.insert(13);    --> {1, 13}
ms.insert(15);     --> {1, 13, 15}
ms.insert(15);    --> {1, 13, 15, 15}
ms.emplace(105);    --> {1, 13, 15, 15, 105}

// erase


all 15'swill be erased 
ms.erase(15)     --> {1, 13, 105}

only a single one erased
ms.erase(ms.find(15))   --> {1, 13, 15, 105}

between range
ms.erase(ms.find(15), ms.find(15)+2);


// Count
auto cnt = ms.count(15);



************************************ UNORDERED SET  *******************************************
unordered set<int> os;    --> stores not in sorted order and  unique 


all the operations are same only lowerbound and upper bound will not work



************************************ MAP  *******************************************

map<int, int> map;   --> stores in Key-Value pairs  --> unique keys in sorted order
map<int, pair<int, int>> mapp;   
map<pair<int, int>, int> pmap;


//Insert 
map[1] = 2;   -->  {1k : 2v}
map.emplace({2, 6})   --> {{1k : 2v},  {2k : 6v}}
map.insert({3, 65})   --> {{1k : 2v},{2k : 6v},{3k : 65v}}


// Access
for(auto it:map){
    cout<<it.first<<" "<<it.second<<endl; 
}


cout<<map[2]<<end;


// find
// present
auto it = map.find(2);
cout<<*(it).second;    

// not present
auto it = map.lower_bound(2)
auto it = map.upper_bound(3)


erase, swap, size, empty are same


************************************ MULTIMAP  *******************************************
same as map but stores duplicate keys and sorted


************************************ UNORDERED MAP  *******************************************
same as map but not stores duplicate keys and not sorted


************************************ EXPLAIN Alogrithms  *******************************************
             included   excluded
(1)   for array --> sort(a, a+n)    --> a --> 1st it and a+n --> last

(2)   for vectors --> sort(v.begin(), v.end())    --> a --> 1st it and a+n --> last

(3)   sort btween range --> sort(a+2, a+4)

(4)   sort in descenfing order --> sort(a, a+n, greater<int>)



bool comp(pair<int, int> p1, pair<int, int> p2){
    if(p1.second <  p2.second){
        return true;
    }

    if(p1.second >  p2.second){
        return false;
    }

    if(p1.first >  p2.first){
        return false;
    }
}


(5)   pair<int, int> a[] = {{1,2}, {3,4}, {5,6}};
      sort(a, a+n, comp)
      // sort it according to second element increasing order
      // if second element is same then sort
      // it according to first element but in descending order

(6)   int num = 7;
      int cnt = __builtin_popcount();   return no of 1's in binary form

      long long num = 766247345798572037894376;
      int cnt = __builtin_popcountll();   return no of 1's in binary form


(7)   string s = '123';
      do{
          cout<<s<<endl;
      }while(next_permtation(s.begin(), s.end()));  --> returna all the permutato=ion of teh string


(8)   int maxi = *max_element(a, a+n);  -->   return maximum element in the array