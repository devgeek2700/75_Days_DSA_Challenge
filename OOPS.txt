OOPs --> Object Objected programming

- vector
- string
- stack     --> all theis libraries existe in STL because of OOPs 
                because implementing this internally OOPS has been used!


************** Classes & Objects *************************
- Objects --> entities in the real world // khass memeory space nahi lete hai
- Classes --> like blueprint of Objects   --> blueprint means how the object will look like  // this take memeory space
- for eg:- toyota made a bluprint and using this blueprint it made car1, care2, care3..  // so car1, car2 --> Objects blueprint --> class
- Propteries/attributes -- is value or qulaity of object
- Methods/memeber functions --> is nothing but a peiece of code/function written inside class

class -->blueprint
     |
     |
obj1 car1
obj1 car2
obj1 car3


// Syntax

class Teacher{
    properties
    Methods
};

********************************* RUN TIME & COMPLIE TIME *************************************
-- Compile time is the period when the programming code is converted to the machine code
-- Runtime is the period of time when a program is running and generally occurs after compile time.


***** Access Modifiers *******
- private --> data & methods accessible inside class
- public --> data & methods accessible to everyone
- proctected --> data & methods accessible inside class & to its derived class

*************** 4 Pillars of OOPs ********************
- Encapsulation
- Abstraction
- Inheritance
- Polymorphism

***************************** ENCAPSULATION ************************
-- wrapping up of data & member functions in single unit called class
-- Helps in data hiding  --> by " private " keyword



***************************** CONSTRUCTOR ************************
-- Special Method invoked automatically at time of "OBJECT CREATION".
-- used for initialisation
-- "this" Special pointer in C++ that points to the current object
-- member variable = parameter ----> this->name = name

# Same name as class
# Constructor doesn't have a return type
# Only called once(automatically), at object CREATION
# Memory alloaction happens when constrcutor is called

***************************** TYPES OF CONSTRUCTOR ************************
- Non Parameterized  --> Teacher(){}
- Parameterized  --> Teacher(int a, int b){}   // there can be same name constructor just the name of the parameter should be different called as constrcutor Overloading --> is an example of polymorphism
- Copy  --> specail default constrcutor to copy properties of one object into another

******* Types of Copy CONSTRUCTOR ***********
- Shallow Copy  --> obj copies all of the member values from one obj to another // it gives issues when we have dynamic memory alloaction(using n"new" keyword or pointer) value so we need deep copy
- Deep Copy --> not only copies of memeber values but also make copies of any dynamically alloacted memeory that the member point to


***************************** DESTRUCTOR ************************
- opposite of constrcutor
- deallocate
- syntax --> ~classNAme(){}
- Only deallocate statically alloacted memory
- in C++ if alloacted memory using "new" keyword --> "delete" keyword id use to deallocate
- Destructor is called automatically when the object is destroyed
- Destructor is called when the scope of the object ends only statically alloacted memory is deallocated

***************************** INHERITANCE ************************
-- when properties & member functionsof base class are passed on to the derived class.
parents/Base class ------> child/derived class
-- code resuability

// In default calling --> not customized
-- first parent class constrcutor is called then child class constrcutor class
-- first child class destructor is called then parent class destructor class


***************************** TYPES OF INHERITANCE ************************
- Single Inheritance  Parent ---> child
- Multi-level Inheritance  Parent ---> Parent ---> Parent ---> child
- Multiple Inheritance  Parent1 + Parent2 ---> child
- Hierarchial Inheritance  Parent1 ---> child1 + child2
- Hybrid Inheritance Parent1 ---> child1 + child2-->Child2SON

***************************** POLYMORPHISM ************************
-- ability of object to take on different forms or behanve in different ways depending on the context in which they are used
-- For eg: constrcutor overloading

***************************** TYPES OF POLYMORPHISM ************************
-- compile time polymorphism   --> static -->during complie time
1) function overloading  
2) constrcutor overloading
3) operator overloading

-- runtime polymorphism
1) function overriding 
-- parent class function is said to be overridden
2) Virtual overriding 
-- is a member function that u expect to be redefined in derived Classes -->add "virtual" keyword before function
-- dynamic nature
-- always delaxre in base class and called in child class in a overridden
-- called during runtime


-- Function overloading --> allows multiple functions to share the same name, but they must have different parameters.
-- Function overriding --> Parent and child both both same function(same no of parameters) with different implemention  ---> depends upon Inheritance


***************************** ABSTRACTION ************************
-- Hiding all unnecessary details & showing only the important parts
-- 1) using Access Modifiers  
-- hiding data --> private
-- Showing to all data --> public  
-- to keep private but inhert so make them --> proctected

-- 2) using Abstract Class --> idea that can be implemented later with valid values
-- provide a base class from which other Classes can be derived
-- this class can't create Classes and are meant to be inherited
-- Abstract class{}




********************* static keyword ******************
1) static variables
-- var declared as static in function are created and initialised once for a lifetime of the program
2) static Objects
-- var declared in a class are created & initialisedonce.
-- they are shared by all the Objects of the class



************************* Friend Function *****************
-- A friend function is a function that is not a member of a class but has the privilege to access the class's private and protected members.


************************* Friend Class *****************
-- A friend class is a class whose members have access to the private and protected members of another class.